#!/bin/bash
OPEN_PROJECT_NAME="domaintools.misp"

if [ "$PROJECT_NAME" = "$OPEN_PROJECT_NAME" ]; then
    return
fi

if [ ! -f ".env" ]; then
    return
fi

if [ -z "$CODE_EDITOR" ]; then
    export CODE_EDITOR=$EDITOR
fi

export LIB_NAME="misp"
export PROJECT_NAME=$OPEN_PROJECT_NAME
export PROJECT_DIR="$PWD"

if [ ! -d "venv" ]; then
    echo "Making $PROJECT_NAME"
    if ! hash pyvenv 2>/dev/null; then
        function pyvenv()
        {
            if hash pyvenv-3.5 2>/dev/null; then
                pyvenv-3.5 $@
            fi
            if hash pyvenv-3.4 2>/dev/null; then
                pyvenv-3.4 $@
            fi
            if hash pyvenv-3.3 2>/dev/null; then
                pyvenv-3.3 $@
            fi
            if hash pyvenv-3.2 2>/dev/null; then
                pyvenv-3.2 $@
            fi
        }
    fi
    pyvenv venv --without-pip
    source venv/bin/activate
    wget https://bootstrap.pypa.io/get-pip.py
    python get-pip.py
    venv/bin/pip install -r requirements.txt
    rm -rf get-pip.py
fi

source venv/bin/activate


function root()
{
    cd $PROJECT_DIR
}


function namespace()
{
    cd $PROJECT_DIR/domaintools
}


function api()
{
    cd $PROJECT_DIR/domaintools.misp
}


function config()
{
    cd $PROJECT_DIR/config
}


function tests()
{
    cd $PROJECT_DIR/tests
}


function repl()
{
    (root
     load
     ipython)
}


function test()
{
    (root
     tox)
}


function test_only()
{
    (root
     tox -- -k $@)
}


function clean()
{
    (root
     isort . -rc)
}


function coverage()
{
    (root
     py.test tests --cov domaintools --cov-report html
     $BROWSER htmlcov/index.html)
}


function open()
{
    (root
     $CODE_EDITOR tests/*.py domaintools/*.py domaintools/$LIB_NAME/*.py .env .gitignore .coveragerc setup.py tox.ini README.md requirements.txt .editorconfig **/*.yaml)
}


function version()
{
    grep -oP "^__version__ = ['\"]\K.+(?=['\"])" $PROJECT_DIR/domaintools/$LIB_NAME/__init__.py
}


function new_version()
{
    (root
     if [ -z "$1" ]; then
         echo "You must supply a new version to replace the old version with"
         return
     fi

     sed -i "s/`version`/$1/" .env setup.py domaintools/$LIB_NAME/__init__.py)
}


function update()
{
    (root
     pip install -r requirements.txt -U)
}


function load()
{
    (root
     pip install -I --no-deps .)
}


function distribute_test()
{
    root
    devpi use batch/dev
    echo ""
    echo "==========================================================================="
    echo "> Type in 'batch' for the password to continue then press enter to continue"
    echo "==========================================================================="
    devpi login batch
    devpi upload
}


function distribute()
{
    echo " Are you sure you want to push this as a new release version? For internal testing use 'distribute_test'."
    read -p " [y/n]? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        distribute_test
        devpi push $OPEN_PROJECT_NAME==`version` batch/release
    fi
}

function leave()
{
    export PROJECT_NAME=""
    export PROJECT_DIR=""
    export LIB_NAME=""

    unset -f root
    unset -f namespace
    unset -f api
    unset -f config
    unset -f tests
    unset -f test
    unset -f test_only
    unset -f coverage
    unset -f open
    unset -f clean
    unset -f distribute
    unset -f version
    unset -f new_version
    unset -f update
    unset -f leave

    deactivate
}
